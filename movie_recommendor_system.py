# -*- coding: utf-8 -*-
"""Movie Recommendor System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11kn_bJe7EXVZnN3oiL2y0M6D16itRuVY
"""

import numpy as np
import pandas as pd

credits_df = pd.read_csv('/content/credits.csv')
movies_df = pd.read_csv('/content/movies.csv')

credits_df.head()

movies_df.head()

pd.set_option('display.max_columns',None)
pd.set_option("display.max_rows", None)

credits_df

movies_df

credits_df.head()

movies_df.tail()

new_df = movies_df.merge(credits_df, on = 'title')

new_df.head()

data = new_df[['overview', 'genres', 'keywords', 'title', 'cast', 'crew', 'movie_id']]

data.info()

data.isnull().sum()

data.dropna(inplace = True)  #remove any rows of missing values, inplace defines df without asssigning to new variable.

data.isnull().sum()

data.duplicated().sum()

data.iloc[0].genres #integer-location

data.iloc[0:3, 1:4].genres  # Accesses the element from row and column

import ast #Tokenizing the code and AST(Abstract Syntax Tree) is used to combining or parsing the tokenized code.

def convert (obj):
  L =[]
  for i in ast.literal_eval(obj):  #Parsing the assigned string to original dictionary or lists or tuple.
    L.append(i['name'])
  return L

data['genres'] = data['genres'].apply(convert)
data['keywords'] = data['keywords'].apply(convert)
data['cast'] = data['cast'].apply(convert)
data.head()

def fetch_director(obj):  #Function which is created to fetch only director's name from crew(heading).
  L = []
  for i in ast.literal_eval(obj):  #Parsing the assigned string to original lists
    if i['job'] == 'Director':   #This loop checks the crew and checks the job whether it is director, if it is then the name of the movie director get append to the 'L' list.
      L.append(i['name'])
      break
  return L

data['crew'] = data['crew'].apply(fetch_director)

data.head()

data['overview'][0]

data['overview'] = data['overview'].apply(lambda x:x.split()) #seperate the words by comma

data.head()

data['genres'] = data['genres'].apply(lambda x:[i.replace(" ","") for i in x])       #(" ","")For each string removing all spaces from every string.
data['keywords'] = data['keywords'].apply(lambda x:[i.replace(" ","") for i in x])   #Unlike a regular function defined using the def keyword, a lambda function is anonymous, meaning it doesn't need a name. Here x defines df
data['cast'] = data['cast'].apply(lambda x:[i.replace(" ","") for i in x])
data['crew'] = data['crew'].apply(lambda x:[i.replace(" ","") for i in x])

data.head()

data['tags'] = data['overview']+data['genres']+data['keywords']+data['cast']+data['crew']

data.head()

dataf = data[['movie_id', 'title', 'tags']]

dataf.head()

dataf['tags'] = dataf['tags'].apply(lambda x:' '.join(x))

dataf.head()

dataf['tags'][0]

dataf['tags']=dataf['tags'].apply(lambda x:x.lower())

dataf.head()

from sklearn.feature_extraction.text import CountVectorizer        #converts text data into numerical representation
cv =  CountVectorizer(max_features = 5000, stop_words = 'english') #max_features selects unique words and stop_words removes words like in, like, and.

vectors = cv.fit_transform(dataf['tags']).toarray()

vectors[0]

len(cv.get_feature_names_out())

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()   #Reduces words to their root form(Ex:'Running' root word is run)

def stem(text):
  y =[]                       # Initialize an empty list to store the stemmed words.
  for i in text.split():      # Split the input text into words.
    y.append(ps.stem(i))      # Apply stemming to each word and append the result to the list.
  return ' '.join(y)          # Join the stemmed words back into a single string and return it.

dataf['tags'] = dataf['tags'].apply(stem)

from sklearn.metrics.pairwise import cosine_similarity   #metric used to measure how similar two non-zero vectors

cosine_similarity(vectors).shape

similarity =  cosine_similarity(vectors) #To evaluate the similarity between documents or between words represented as vectors.

sorted(list(enumerate(similarity[0])), reverse = True , key = lambda x:x[1:])[1:6]

# Retrieves the first element of the similarity list.
# Enumerate the elements (index, value) to keep track.
# Sorts the enumerated pairs in descending order based on the similarity values.
# Selects the top 5 pairs excluding the highest similarity pair because it will recommend the same movies to user by analyzing all data.

def recommend(movie):
  movie_index = dataf[dataf['title']==movie].index[0]  #Searches the DataFrame dataf for the row where the 'title' column matches the input movie.
  distances = similarity[movie_index]                  #Store the user given movie
  movies_list = sorted(list(enumerate(distances)), reverse = True, key = lambda x:x[1])[1:6] #Perform finding similar movies.

  for i in movies_list:                  # Purpose of this loop is to output the titles of the top 5 recommended movies
    print(dataf.iloc[i[0]].title)

recommend('Avatar')

recommend('Spectre')

recommend('The Dark Knight Rises')

recommend('A True Story')